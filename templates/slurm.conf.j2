{% set ohcp_slurm_conf_merged=(openhpc_slurm_conf_default | from_slurm_conf | combine(openhpc_slurm_conf_overrides | from_slurm_conf)) %}
{% for key, value in ohcp_slurm_conf_merged.items() %}
{{ key }}={{ value }}
{% endfor %}

# LOGIN-ONLY NODES
# Define slurmd nodes not in partitions for login-only nodes in "configless" mode:
{%if openhpc_login_only_nodes %}{% for node in groups[openhpc_login_only_nodes] %}
NodeName={{ node }}
{% endfor %}{% endif %}

# COMPUTE NODES
{% set donehosts = [] %}
{% for part in openhpc_slurm_partitions %}
{%  set nodelist = [] %}
{%  for group in part.get('groups', [part]) %}
{%      set group_name = group.cluster_name|default(openhpc_cluster_name) ~ '_' ~ group.name %}
# openhpc_slurm_partitions group: {{ group_name }}
{%      set inventory_group_hosts = groups.get(group_name, []) %}
{%      if inventory_group_hosts | length > 0 %}
{%          set play_group_hosts = inventory_group_hosts | intersect (play_hosts) %}
{%          set first_host = play_group_hosts | first | mandatory('Group "' ~ group_name ~ '" contains no hosts in this play - was --limit used?') %}
{%          set first_host_hv = hostvars[first_host] %}
{%          set ram_mb = (first_host_hv['ansible_memory_mb']['real']['total'] * (group.ram_multiplier | default(openhpc_ram_multiplier))) | int %}
{%          for hostlist in (inventory_group_hosts | hostlist_expression) %}
{%              set gres = ' Gres=%s' % (','.join(group.gres | map(attribute='conf') )) if 'gres' in group else '' %}
{%              if hostlist not in donehosts %}
NodeName={{ hostlist }} State=UNKNOWN RealMemory={{ group.get('ram_mb', ram_mb) }} Sockets={{first_host_hv['ansible_processor_count']}} CoresPerSocket={{ first_host_hv['ansible_processor_cores'] }} ThreadsPerCore={{ first_host_hv['ansible_processor_threads_per_core'] }}{{ gres }}
{%              endif %}
{%              set _ = nodelist.append(hostlist) %}
{%              set _ = donehosts.append(hostlist) %}
{%          endfor %}{# nodes #}
{%      endif %}{# inventory_group_hosts #}
{%      for extra_node_defn in group.get('extra_nodes', []) %}
{{ extra_node_defn.items() | map('join', '=') | join(' ') }}
{%          set _ = nodelist.append(extra_node_defn['NodeName']) %}
{%      endfor %}
{%  endfor %}{# group #}
{%  if not nodelist %}{# empty partition #}
{%      set nodelist = ['""'] %}
{%  endif %}
PartitionName={{part.name}} Default={{ part.get('default', 'YES') }} MaxTime={{ part.get('maxtime', openhpc_job_maxtime) }} State=UP Nodes={{ nodelist | join(',') }} {{ part.partition_params | default({}) | dict2parameters }}
{% endfor %}{# partitions #}

# Define a non-existent node, in no partition, so that slurmctld starts even with all partitions empty
NodeName=n/a
