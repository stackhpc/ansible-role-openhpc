ClusterName={{ openhpc_cluster_name }}

# PARAMETERS
{% for k, v in openhpc_default_config | combine(openhpc_config) | items %}
{%  if v != "omit" %}{# allow removing items using setting key: omit #}
{%    if k != 'SlurmctldParameters' %}{# handled separately due to configless mode #}
{{ k }}={{ v | join(',') if (v is sequence and v is not string) else v }}
{%    endif %}
{%  endif %}
{% endfor %}

{% set slurmctldparameters = ((openhpc_config.get('SlurmctldParameters', []) + ['enable_configless']) | unique) %}
SlurmctldParameters={{ slurmctldparameters | join(',') }}

# LOGIN-ONLY NODES
# Define slurmd nodes not in partitions for login-only nodes in "configless" mode:
{%if openhpc_login_only_nodes %}{% for node in groups[openhpc_login_only_nodes] %}
NodeName={{ node }}
{% endfor %}{% endif %}


# COMPUTE NODES
{% for nodegroup in openhpc_nodegroups %}
# nodegroup: {{ nodegroup.name }}
{%  set inventory_group_name = openhpc_cluster_name ~ '_' ~ nodegroup.name %}
{%  set inventory_group_hosts = groups.get(inventory_group_name, []) %}
{%      if inventory_group_hosts | length > 0 %}
{%          set play_group_hosts = inventory_group_hosts | intersect (play_hosts) %}
{%          set first_host = play_group_hosts | first | mandatory('Inventory group "' ~ inventory_group_name ~ '" contains no hosts in this play - was --limit used?') %}
{%          set first_host_hv = hostvars[first_host] %}
{%          set ram_mb = (first_host_hv['ansible_memory_mb']['real']['total'] * (nodegroup.ram_multiplier | default(openhpc_ram_multiplier))) | int %}
{%          set hostlists = (inventory_group_hosts | hostlist_expression) %}{# hosts in inventory group aren't necessarily a single hostlist expression #}
NodeName={{ hostlists | join(',') }} {{ '' -}}
    Features={{ (['nodegroup_' ~ nodegroup.name] + nodegroup.features | default([]) ) | join(',') }} {{ '' -}}
    State=UNKNOWN {{ '' -}}
    RealMemory={{ nodegroup.ram_mb | default(ram_mb) }} {{ '' -}}
    Sockets={{ first_host_hv['ansible_processor_count'] }} {{ '' -}}
    CoresPerSocket={{ first_host_hv['ansible_processor_cores'] }} {{ '' -}}
    ThreadsPerCore={{ first_host_hv['ansible_processor_threads_per_core'] }} {{ '' -}}
    {{ nodegroup.node_params | default({}) | dict2parameters }} {{ '' -}}
    {% if 'gres' in nodegroup -%}
    Gres={{ ','.join(nodegroup.gres | map(attribute='conf')) -}}
    {% elif openhpc_gres_autodetect == 'nvml' and first_host_hv['ohpc_node_gpu_gres'] != '' -%}
    Gres={{ first_host_hv['ohpc_node_gpu_gres'] -}}
    {% endif %}

{%      endif %}{# 1 or more hosts in inventory #}
NodeSet=nodegroup_{{ nodegroup.name }} Feature=nodegroup_{{ nodegroup.name }}

{% endfor %}

# Define a non-existent node, in no partition, so that slurmctld starts even with all partitions empty
NodeName=nonesuch

# PARTITIONS
{% for partition in openhpc_partitions %}
PartitionName={{partition.name}} {{ '' -}}
    Default={{ partition.get('default', 'YES') }} {{ '' -}}
    MaxTime={{ partition.get('maxtime', openhpc_job_maxtime) }} {{ '' -}}
    State=UP  {{ '' -}}
    Nodes={{ partition.get('nodegroups', [partition.name]) | map('regex_replace', '^', 'nodegroup_') | join(',') }} {{ '' -}}
    {{ partition.partition_params | default({}) | dict2parameters }}
{% endfor %}{# openhpc_partitions #}
